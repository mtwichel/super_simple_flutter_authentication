name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"

env:
  # Use docker.io for Docker Hub or ghcr.io for GitHub Container Registry
  REGISTRY: ghcr.io
  # GitHub Container Registry uses the repository owner as namespace
  IMAGE_NAME: ${{ github.repository }}/super-simple-auth-server

jobs:
  build:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better cache hits

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./packages/super_simple_authentication_server
          file: ./packages/super_simple_authentication_server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false # Disable provenance for better compatibility
          sbom: true # Generate Software Bill of Materials

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
        continue-on-error: true

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "file-exists=true" >> $GITHUB_OUTPUT
            echo "SARIF file found"
          else
            echo "file-exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found - creating empty one"
            # Create an empty SARIF file if none exists
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy","version":"0.0.0"}},"results":[]}]}' > trivy-results.sarif
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-sarif.outputs.file-exists == 'true'
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          sarif-file: docker-scout-results.sarif
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Check if Docker Scout SARIF file exists
        id: check-scout-sarif
        run: |
          if [ -f "docker-scout-results.sarif" ]; then
            echo "file-exists=true" >> $GITHUB_OUTPUT
            echo "Docker Scout SARIF file found"
          else
            echo "file-exists=false" >> $GITHUB_OUTPUT
            echo "Docker Scout SARIF file not found - creating empty one"
            # Create an empty SARIF file if none exists
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"docker-scout","version":"0.0.0"}},"results":[]}]}' > docker-scout-results.sarif
          fi

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-scout-sarif.outputs.file-exists == 'true'
        with:
          sarif_file: docker-scout-results.sarif

  notify:
    name: Notify on Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read

    steps:
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Create Release Summary
        run: |
          echo "## 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
